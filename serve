#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""uvicorn main module"""
import os
import subprocess
import signal
import sys
import sagemaker_ssh_helper

os.environ["COQUI_TOS_AGREED"] = "1"

#    ###for debug only#######
sys.path.append(os.path.join(os.path.dirname(__file__), "lib"))
sagemaker_ssh_helper.setup_and_start_ssh()


def _add_sigterm_handler(mms_process):
    def _terminate(signo, frame):  # pylint: disable=unused-argument
        try:
            os.system('ps aux')
            os.kill(mms_process.pid, signal.SIGTERM)
        except OSError:
            pass

    signal.signal(signal.SIGTERM, _terminate)


def download_s3_data(s3_path, local_path):
    os.makedirs(local_path, exist_ok=True)
    cmd = f"s5cmd sync {s3_path}* {local_path}"
    subprocess.run(cmd, shell=True, check=True)


# this requires deepspeed, should build dockerfile-sagemaker-ds
use_deepspeed = os.environ.get("USE_DEEPSPEED", "0")
custom_model_path = os.environ.get("CUSTOM_MODEL_PATH", "tts_models/multilingual/multi-dataset/xtts_v2")

# config file path, relative to CUSTOM_MODEL_PATH, optional if using public model id
custom_model_config_path = os.environ.get("CUSTOM_MODEL_CONFIG_PATH")

if custom_model_path.startswith('s3://'):
    local_model_path = '/root/.local/xtts_model/'
    if not custom_model_path.endswith('/'):
        custom_model_path += '/'

    download_s3_data(custom_model_path, local_model_path)
    custom_model_path = local_model_path

    if not custom_model_config_path:
        print('[WARN] env `CUSTOM_MODEL_CONFIG_PATH` is not specified, will fallback to `config.json`')
        custom_model_config_path = local_model_path + 'config.json'

    if not os.path.exists(custom_model_config_path):
        print(f'[ERROR] {custom_model_config_path} not found')

    cmd = ["python3", "/root/TTS/server/server.py",
           "--model_path", custom_model_path,
           "--config_path", custom_model_config_path,
           "--use_deepspeed", use_deepspeed,
           "--use_cuda", "1", "--port", "8080"]
else:
    cmd = ["python3", "/root/TTS/server/server.py",
           "--model_name", custom_model_path,
           "--use_deepspeed", use_deepspeed,
           "--use_cuda", "1", "--port", "8080"]

process = subprocess.Popen(cmd)
process.wait()